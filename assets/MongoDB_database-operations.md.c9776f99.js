import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.2c467624.js";const u=JSON.parse('{"title":"数据库、集合、文档操作","description":"","frontmatter":{},"headers":[],"relativePath":"MongoDB/database-operations.md","filePath":"MongoDB/database-operations.md"}'),e={name:"MongoDB/database-operations.md"},p=n(`<h1 id="数据库、集合、文档操作" tabindex="-1">数据库、集合、文档操作 <a class="header-anchor" href="#数据库、集合、文档操作" aria-label="Permalink to &quot;数据库、集合、文档操作&quot;">​</a></h1><h2 id="数据库操作" tabindex="-1">数据库操作 <a class="header-anchor" href="#数据库操作" aria-label="Permalink to &quot;数据库操作&quot;">​</a></h2><ul><li>查看所有数据库<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dbs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dbs</span></span></code></pre></div></li><li>创建 <blockquote><p>mongoDB中默认的数据库是<code>test</code>，如果未创建新的数据库，则集合会存储到<code>test</code>中。 在MongoDB中，创建集合后要再向其插入数据(文档/记录)后才会真正创建。</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DATABASE_NMAE</span></span>
<span class="line"><span style="color:#6A737D;"># 如果数据库不存在，则会创建；否则会切换到指定数据库。</span></span>
<span class="line"><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_blog</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DATABASE_NMAE</span></span>
<span class="line"><span style="color:#6A737D;"># 如果数据库不存在，则会创建；否则会切换到指定数据库。</span></span>
<span class="line"><span style="color:#6F42C1;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_blog</span></span></code></pre></div></li><li>删除<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">db.dropDatabase</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">db.dropDatabase</span><span style="color:#24292E;">()</span></span></code></pre></div></li></ul><h2 id="集合操作" tabindex="-1">集合操作 <a class="header-anchor" href="#集合操作" aria-label="Permalink to &quot;集合操作&quot;">​</a></h2><blockquote><p>不需要创建集合，当插入文档时，集合会自动创建。</p></blockquote><ul><li>创建<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#B392F0;">db.createCollection(name,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">options</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 举例：</span></span>
<span class="line"><span style="color:#B392F0;">db.createCollection(</span><span style="color:#B392F0;">&#39;user&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">db.createCollection(</span><span style="color:#B392F0;">&#39;pic&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capped:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">size:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6124800</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">max:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#6F42C1;">db.createCollection(name,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">options</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 举例：</span></span>
<span class="line"><span style="color:#6F42C1;">db.createCollection(</span><span style="color:#6F42C1;">&#39;user&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">db.createCollection(</span><span style="color:#6F42C1;">&#39;pic&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capped:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">size:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6124800</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li>name: 要创建的集合名称;</li><li>options: 可选参数，指定有关内存大小及索引的选项 <ol><li>capped: boolean. 如果为<code>true</code>，则创建固定集合。固定集合指的是有着固定大小的集合，当达到最大值时，会自动覆盖最早的文档。</li><li>size: 为固定集合指定一个最大值，即字节数。（<strong>capped: true时，size必填</strong>）</li><li>max: 指固定集合中包含文档的最大数量</li></ol></li></ul></li><li>查看集合<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collections</span></span>
<span class="line"><span style="color:#6A737D;"># 或</span></span>
<span class="line"><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tables</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collections</span></span>
<span class="line"><span style="color:#6A737D;"># 或</span></span>
<span class="line"><span style="color:#6F42C1;">show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tables</span></span></code></pre></div></li><li>删除<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#B392F0;">db.collection.drop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 举例</span></span>
<span class="line"><span style="color:#E1E4E8;">db.posts.drop()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#6F42C1;">db.collection.drop</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 举例</span></span>
<span class="line"><span style="color:#24292E;">db.posts.drop()</span></span></code></pre></div></li></ul><h2 id="文档操作" tabindex="-1">文档操作 <a class="header-anchor" href="#文档操作" aria-label="Permalink to &quot;文档操作&quot;">​</a></h2><ul><li><h3 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h3><ol><li>语法</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#B392F0;">db.user.find([query],</span><span style="color:#E1E4E8;"> [fields])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#6F42C1;">db.user.find([query],</span><span style="color:#24292E;"> [fields])</span></span></code></pre></div><ol start="2"><li>参数说明</li></ol><ul><li>query: 可选，使用查询操作符指定查询条件</li><li>fields: 可选，使用投影操作符指定返回的键。如果要查询所有键值，忽略此参数即可（默认省略）</li></ul><ol start="3"><li>AND条件 OR条件</li></ol><ul><li>AND：<code>db.user.find({name: &#39;张三&#39;, age: 22}).pretty()</code></li><li>OR: <code>db.user.find({$or: [{name: &#39;张三&#39;}, {age: 22}]}).pretty()</code></li><li>AND和OR联合使用：<code>db.user.find({likes: {$gt: 50}, $or: [{age: 22}, {sex: 1}]})</code>，类似SQL中<code>where likes &gt; 50 and (age = 22 or sex = 1)</code></li></ul><ol start="4"><li>条件操作符</li></ol><table><thead><tr><th>操作符</th><th>举例</th><th>类比SQL</th></tr></thead><tbody><tr><td>等于</td><td>db.user.find({name: &#39;小明&#39;})</td><td>where name = &#39;小明&#39;</td></tr><tr><td>不等于</td><td>db.user.find({age: {$ne: 20}})</td><td>where age != 20</td></tr><tr><td>大于</td><td>db.user.find({age: {$gt: 20}})</td><td>where age &gt; 20</td></tr><tr><td>大于等于</td><td>db.user.find({age: {$gte: 20}})</td><td>where age&gt;= 20</td></tr><tr><td>小于</td><td>db.user.find({age: {$lt:&gt; 20}})</td><td>where age &lt; 20</td></tr><tr><td>小于等于</td><td>db.user.find({age: {$lte: 20}})</td><td>where age &lt;= 20</td></tr></tbody></table><ol start="5"><li>查询总条数：<code>db.user.find().count()</code></li><li>分页查询：<code>skip：跳过几条</code>，<code>limit：查询条数</code>；<code>db.user.find().limit(10).skip(10)</code></li><li>排序：sort() -1为倒序，1为正序; <code>db.user.find().sort({id: -1})</code></li></ol></li><li><h3 id="新增" tabindex="-1">新增 <a class="header-anchor" href="#新增" aria-label="Permalink to &quot;新增&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#B392F0;">db.user.insert</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 举例</span></span>
<span class="line"><span style="color:#E1E4E8;">db.user.insert({id: 1, name: &#39;小明&#39;, age: 20})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 语法</span></span>
<span class="line"><span style="color:#6F42C1;">db.user.insert</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 举例</span></span>
<span class="line"><span style="color:#24292E;">db.user.insert({id: 1, name: &#39;小明&#39;, age: 20})</span></span></code></pre></div></li><li><h3 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h3><ul><li>语法<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">db.collection.update(&lt;query&gt;,</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">updat</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> [upsert, </span><span style="color:#9ECBFF;">multi,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writeConcern]</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 新语法</span></span>
<span class="line"><span style="color:#B392F0;">db.collection.updateOne</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">db.collection.updateMany()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">db.collection.update(&lt;query&gt;,</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">updat</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> [upsert, </span><span style="color:#032F62;">multi,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writeConcern]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 新语法</span></span>
<span class="line"><span style="color:#6F42C1;">db.collection.updateOne</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">db.collection.updateMany()</span></span></code></pre></div></li><li>参数说明 <ol><li>query: update的查询条件，类似SQL语法 <code>where</code></li><li>update: update的对象和更新的操作符。($set)，类似SQL update查询<code>set</code>后面的</li><li>upsert: 可选，如果不存在update的记录，是否插入新记录。默认为<code>false</code></li><li>multi: 可选，默认<code>false</code>，只更新找到的第一条记录；如果为<code>true</code>则把查询的多条记录都更新</li><li>writeConcern: 可选，抛出异常的级别</li></ol></li><li>举例<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">db.user.update(</span><span style="color:#E1E4E8;">{id: </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> $set</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{age:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">40</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">db.user.update(</span><span style="color:#24292E;">{id: </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> $set</span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{age:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">40</span><span style="color:#032F62;">}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span><span style="color:#24292E;">)</span></span></code></pre></div></li></ul></li><li><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><ul><li><p>语法</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">db.collection.remove(&lt;query&gt;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{justOne,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writeConcern}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">或</span></span>
<span class="line"><span style="color:#B392F0;">db.collection.deleteOne</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">db.collection.deleteMany()</span></span>
<span class="line"><span style="color:#B392F0;">db.collection.findOneAndDelete</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">db.collection.bulkWrite()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">db.collection.remove(&lt;query&gt;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{justOne,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writeConcern}</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">或</span></span>
<span class="line"><span style="color:#6F42C1;">db.collection.deleteOne</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">db.collection.deleteMany()</span></span>
<span class="line"><span style="color:#6F42C1;">db.collection.findOneAndDelete</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">db.collection.bulkWrite()</span></span></code></pre></div></li><li><p>参数说明</p><ol><li>query: 可选，删除文档的条件</li><li>justOne: 可选，如果设为true或1，则只删除一个文档；如果不设置参数，或使用默认参数false，则删除所有匹配的文档</li><li>writeConcern: 可选，抛出异常的级别</li></ol></li><li><p>举例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 删除所有age=20的数据</span></span>
<span class="line"><span style="color:#B392F0;">db.user.remove(</span><span style="color:#E1E4E8;">{age: </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">}</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 删除age=20的1条数据</span></span>
<span class="line"><span style="color:#B392F0;">db.user.remove(</span><span style="color:#E1E4E8;">{age: </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">db.user.remove(</span><span style="color:#E1E4E8;">{age: </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除所有数据</span></span>
<span class="line"><span style="color:#B392F0;">db.user.remove(</span><span style="color:#E1E4E8;">{})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 删除所有age=20的数据</span></span>
<span class="line"><span style="color:#6F42C1;">db.user.remove(</span><span style="color:#24292E;">{age: </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">}</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 删除age=20的1条数据</span></span>
<span class="line"><span style="color:#6F42C1;">db.user.remove(</span><span style="color:#24292E;">{age: </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">db.user.remove(</span><span style="color:#24292E;">{age: </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 删除所有数据</span></span>
<span class="line"><span style="color:#6F42C1;">db.user.remove(</span><span style="color:#24292E;">{})</span></span></code></pre></div></li></ul></li></ul><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><p><a href="https://cloud.tencent.com/developer/article/2344837" target="_blank" rel="noreferrer">MongoDB入门</a></p>`,10),o=[p];function t(c,r,i,d,y,E){return a(),l("div",null,o)}const b=s(e,[["render",t]]);export{u as __pageData,b as default};

import{_ as e,o as a,c as l,Q as o}from"./chunks/framework.ff4c43a7.js";const _=JSON.parse('{"title":"Node.js 全局对象","description":"","frontmatter":{},"headers":[],"relativePath":"Node/global-object.md","filePath":"Node/global-object.md"}'),i={name:"Node/global-object.md"},t=o('<h1 id="node-js-全局对象" tabindex="-1">Node.js 全局对象 <a class="header-anchor" href="#node-js-全局对象" aria-label="Permalink to &quot;Node.js 全局对象&quot;">​</a></h1><h2 id="global" tabindex="-1">global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;global&quot;">​</a></h2><p>global最根本的作用是作为全局变量的宿主。 按照ECMAScript的定义，满足以下条件的变量是全局变量：</p><ul><li>定义在最外层的变量；</li><li>全局对象的属性；</li><li>隐式定义的变量（未定义直接赋值的变量）</li></ul><h2 id="process" tabindex="-1">process <a class="header-anchor" href="#process" aria-label="Permalink to &quot;process&quot;">​</a></h2><blockquote><p>是一个全局变量，即<code>global</code>对象的属性。用于描述当前进程状态的对象，提供了与操作系统交互的简单接口。</p></blockquote><h4 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h4><ul><li>exit 当进程准备退出时触发</li><li>beforeExit 当node清除事件循环，并且没有其它安排时 触发。</li><li>uncaughtException 当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。</li><li>Signal事件 当进程收到信号就触发。</li></ul><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ol><li>stdout 标准输出流</li><li>stdin 标准输入流</li><li>stderr 标准错误流</li><li>argv 返回一个数组，由命令行执行脚本时的各个参数组成。第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。</li><li>execPath 返回执行当前脚本的node二进制文件的绝对路径。</li><li>execArgv 返回一个数组，成员是命令行下执行脚本时，在node可执行文件与脚本文件之间的命令行参数。</li><li>env 返回一个对象，成员为当前shell的环境变量</li><li>exitCode 进程退出时的代码。如果进程通过<code>process.exit()</code>退出，则不需要指定退出码</li><li>version node的版本</li><li>versions 包含node的版本和依赖</li><li>config 一个包含用来编译当前node执行文件的JavaScript配置选项的对象</li><li>pid 当前进程的进程号</li><li>title 进程名，默认为node</li><li>arch 当前CPU的架构：<code>arm</code> <code>ia32</code> <code>x64</code></li><li>platform 运行程序所在平台系统 <code>darwin</code> <code>freebsd</code> <code>linux</code> <code>sunos</code> <code>win32</code></li><li>mainModule require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。</li></ol><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li><code>abort()</code> 这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。</li><li><code>chdir(directory)</code> 改变当前进程的工作目录，如果操作失败抛出异常</li><li><code>cwd()</code> 返回当前进程的工作目录</li><li><code>exit(code)</code> 使用指定的code结束进程，默认使用 0</li><li><code>kill(pid, [signal])</code> 发信号给进程。pid是进程id, signal是发送的信号的字符串描述</li><li><code>memoryUsage()</code> 返回node进程所用的内存状况，单位：字节</li><li><code>nextTick(callback)</code> 一旦当前事件循环结束，调用回调函数</li><li><code>umask([mask])</code> 设置或读取进程文件的掩码。子进程从父进程继承掩码。</li><li><code>uptime()</code> 返回node已经运行的秒数</li><li><code>hrtime()</code> 返回当前进程的高分辨时间，形式为<code>[seconds, nanoseconds]</code>.主要用途是通过精确的时间间隔，来衡量程序的性能。可以将之前的结果传递给当前的 <code>process.hrtime()</code> ，会返回两者间的时间差，用来基准和测量时间间隔。</li></ul><h2 id="filename" tabindex="-1">__filename <a class="header-anchor" href="#filename" aria-label="Permalink to &quot;__filename&quot;">​</a></h2><ul><li>表示当前正在执行的脚本的文件名。</li><li>它将输出文件所在的位置的绝对路径，且和命令行参数指定的文件名不一定相同。</li><li>如果在模块中，返回的是模块文件的路径。</li></ul><h2 id="dirname" tabindex="-1">__dirname <a class="header-anchor" href="#dirname" aria-label="Permalink to &quot;__dirname&quot;">​</a></h2><ul><li>表示当前执行的脚本文件所在的目录。</li></ul><h2 id="settimeout-cb-ms" tabindex="-1">setTimeout(cb, ms) <a class="header-anchor" href="#settimeout-cb-ms" aria-label="Permalink to &quot;setTimeout(cb, ms)&quot;">​</a></h2><h2 id="cleartimeout-t" tabindex="-1">clearTimeout(t) <a class="header-anchor" href="#cleartimeout-t" aria-label="Permalink to &quot;clearTimeout(t)&quot;">​</a></h2><h2 id="setinterval-cb-ms" tabindex="-1">setInterval(cb, ms) <a class="header-anchor" href="#setinterval-cb-ms" aria-label="Permalink to &quot;setInterval(cb, ms)&quot;">​</a></h2><h2 id="clearinterval-t" tabindex="-1">clearInterval(t) <a class="header-anchor" href="#clearinterval-t" aria-label="Permalink to &quot;clearInterval(t)&quot;">​</a></h2><h2 id="console" tabindex="-1">console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;console&quot;">​</a></h2>',21),c=[t];function d(r,n,s,h,u,m){return a(),l("div",null,c)}const q=e(i,[["render",d]]);export{_ as __pageData,q as default};

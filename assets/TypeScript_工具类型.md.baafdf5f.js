import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.34fdfb80.js";const C=JSON.parse('{"title":"工具类型","description":"","frontmatter":{},"headers":[],"relativePath":"TypeScript/工具类型.md","filePath":"TypeScript/工具类型.md"}'),p={name:"TypeScript/工具类型.md"},o=l(`<h1 id="工具类型" tabindex="-1">工具类型 <a class="header-anchor" href="#工具类型" aria-label="Permalink to &quot;工具类型&quot;">​</a></h1><ul><li><h2 id="作用于-联合类型" tabindex="-1">作用于：联合类型 <a class="header-anchor" href="#作用于-联合类型" aria-label="Permalink to &quot;作用于：联合类型&quot;">​</a></h2><ul><li>Exclude 从联合类型UnionType里面，删除ExcludeMembers，返回一个新的类型<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Exclude</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UnionType, ExcludeMembers</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exclude</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// &#39;1&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Exclude</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UnionType, ExcludeMembers</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exclude</span><span style="color:#24292E;">&lt;</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// &#39;1&#39;</span></span></code></pre></div></li><li>Extract 从联合类型UnionType中提取指定类型，组成新类型返回；如果Union不在UnionType中，则返回never类型<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Extract</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">UnionType, Union</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Extract</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// &#39;2&#39; | &#39;3&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Extract</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">UnionType, Union</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Extract</span><span style="color:#24292E;">&lt;</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// &#39;2&#39; | &#39;3&#39;</span></span></code></pre></div></li><li>NonNullable: 用来从联合类型Type删除null类型和undefined类型，组成一个新类型返回，也就是返回Type的非空类型版本<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NonNullable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">boolean</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">null</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// string|boolean</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NonNullable</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">boolean</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">null</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// string|boolean</span></span></code></pre></div></li></ul></li><li><h2 id="作用于-对象类型" tabindex="-1">作用于: 对象类型 <a class="header-anchor" href="#作用于-对象类型" aria-label="Permalink to &quot;作用于: 对象类型&quot;">​</a></h2><ul><li>Omit: 从对象类型Type中删除指定属性Keys,组成一个新的对象类型返回<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Omit</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// { y: number }</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Omit</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Omit</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// { y: number }</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Omit</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;y&#39;</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// {}</span></span></code></pre></div></li><li>Partial：将参数类型 Type 的所有属性变为 可选属性</li><li>Pick：从对象类型 Type 中选择指定的属性 Keys，组成一个新的对象类型返回</li><li>Readonly：将对象类型 Type 的所有属性 变为只读属性</li><li>Record：返回一个对象类型，参数 Keys 作为键名，参数 Type 用作键值类型; Keys的类型必须兼容 string|number|symbol<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// { a: number }</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#F97583;">|</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// { a: string, b: string }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// { a: number }</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// { a: string, b: string }</span></span></code></pre></div></li><li>Required: 将参数类型 Type 的所有属性 变为 必选属性；与 Partial相反</li></ul></li><li><h2 id="作用于-构造方法" tabindex="-1">作用于：构造方法 <a class="header-anchor" href="#作用于-构造方法" aria-label="Permalink to &quot;作用于：构造方法&quot;">​</a></h2><ul><li>ConstructorParameters: 提取类构造方法的参数类型，组成一个元组类型返回<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConstructorParameters</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// [x: string, y: number]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConstructorParameters</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// [x: string|undefined]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConstructorParameters</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// [x: string, y: number]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConstructorParameters</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// [x: string|undefined]</span></span></code></pre></div></li></ul></li><li><h2 id="作用于-promise" tabindex="-1">作用于：Promise <a class="header-anchor" href="#作用于-promise" aria-label="Permalink to &quot;作用于：Promise&quot;">​</a></h2><ul><li>Awaited: 用来取出Promise的返回值类型，适合用在描述 <strong>then()</strong> 方法和 await 命令的参数类型<div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// string</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Awaited</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// number | boolean</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Awaited</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// string</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Awaited</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// number | boolean</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Awaited</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">&gt;&gt;</span></span></code></pre></div></li></ul></li><li><h2 id="作用于-函数" tabindex="-1">作用于：函数 <a class="header-anchor" href="#作用于-函数" aria-label="Permalink to &quot;作用于：函数&quot;">​</a></h2><ul><li>InstanceType: 提取构造函数的返回值类型（即实例类型），参数 <strong>Type</strong> 是一个构造函数，等同于构造函数的 <strong>ReturnType</strong><div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ErrorConstructor</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// Error</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">FunctionConstructor</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// Function</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">RegExpConstructor</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// RegExp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;"> = {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">D</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceType</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// object</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceType</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ErrorConstructor</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// Error</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceType</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">FunctionConstructor</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// Function</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceType</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">RegExpConstructor</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// RegExp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;"> = {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InstanceType</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">D</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// D</span></span></code></pre></div></li><li>OmitThisparameter: 从函数类型中移除 this 参数</li><li>Parameters: 从函数类型Type里提取参数类型，组成一个元组返回</li><li>ReturnType: 提取函数类型 Type 的返回值类型，并作为一个新类型返回</li><li>ThisParameterType: 提取函数类型中的 this 参数的类型</li><li>ThisType: 不返回类型，只用来跟其他类型组成交叉类型，用来提示 TypeScript 其他类型里面的 this 类型</li></ul></li><li><h2 id="字符串类型工具" tabindex="-1">字符串类型工具 <a class="header-anchor" href="#字符串类型工具" aria-label="Permalink to &quot;字符串类型工具&quot;">​</a></h2><ul><li>Uppercase 将字符串类型每个字符转为大写</li><li>Lowercase 将字符串类型每个字符转为小写</li><li>Capitalize 将字符串的第一个字符转为大写</li><li>Uncapitalize 将字符串的第一个字符转为小写</li></ul><div class="language-TS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TS</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ATest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uppercase</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// HELLO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;WORLD&#39;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lowercase</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;always&#39;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Capitalize</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// Always</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;FOOD&#39;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uncapitalize</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">// fOOD</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ATest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uppercase</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// HELLO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;WORLD&#39;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lowercase</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;always&#39;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Capitalize</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// Always</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">D</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;FOOD&#39;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uncapitalize</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">&gt; </span><span style="color:#6A737D;">// fOOD</span></span></code></pre></div></li></ul>`,2),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{C as __pageData,g as default};
